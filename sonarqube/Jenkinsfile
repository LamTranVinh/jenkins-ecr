pipeline {
    agent any

    environment {
        GRADLE_USER_HOME = "${WORKSPACE}/.gradle"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    def myGradleContainer = docker.image('gradle:jdk8-alpine')
                    myGradleContainer.pull()
                    myGradleContainer.inside("-v ${GRADLE_USER_HOME}:/home/gradle/.gradle") {
                        sh 'cd sonarqube && /opt/gradle/bin/gradle build --stacktrace'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'sonarqube-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withCredentials([string(credentialsId: 'sonarqube-token')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner -Dsonar.host.url=http://sonarqube.local:9000 \
                            -Dsonar.login=\$SONAR_LOGIN -Dsonar.projectKey=your-project-key \
                            -Dsonar.projectName=YourProjectName -Dsonar.sources=your-source-dir \
                            -Dsonar.tests=your-test-dir -Dsonar.language=java
                        """
                    }
                }
            }
        }
    }
}
